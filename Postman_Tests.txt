Postman Tests for API Endpoints

1. Retrieve All Users
- **Endpoint**: GET /users/
- **Method**: GET
- **Output**: 
[
    {
        "username": "user_a",
        "email": "user_a@example.com",
        "user_ip": "24.97.8.0",
        "location": "NY, USA",
        "preferences": [
            "Black"
        ],
        "user_id": 1,
        "date_joined": "2024-10-28T10:01:17"
    },
    {
        "username": "user_b",
        "email": "user_b@example.com",
        "user_ip": "178.238.11.6",
        "location": "London, UK",
        "preferences": [
            "Long coat"
        ],
        "user_id": 2,
        "date_joined": "2024-10-28T10:01:17"
    },
    {
        "username": "john_doe",
        "email": "john.doe@example.com",
        "user_ip": "24.97.8.0",
        "location": "New York",
        "preferences": [
            "casual",
            "summer"
        ],
        "user_id": 3,
        "date_joined": "2024-10-28T10:39:13"
    },
    {
        "username": "jane_doe",
        "email": "jane.doe@example.com",
        "user_ip": "104.174.125.138",
        "location": "Los Angeles",
        "preferences": [
            "formal",
            "winter"
        ],
        "user_id": 5,
        "date_joined": "2024-10-28T10:44:00"
    },
    {
        "username": "john_doe",
        "email": "john@example.com",
        "user_ip": "24.97.8.0",
        "location": "New York",
        "preferences": [
            "Casual",
            "Formal"
        ],
        "user_id": 9,
        "date_joined": "2024-10-28T11:08:49"
    }
]

2. Retrieve a Specific User by ID
- **Endpoint**: GET /user/{user_id}
- **Method**: GET
- **URL Parameters**: 
  - user_id: Replace {user_id} with an existing user item ID (e.g., 3).
- **Output**: 
{
    "username": "john_doe",
    "email": "john.doe@example.com",
    "user_ip": "24.97.8.0",
    "location": "New York",
    "preferences": [
        "casual",
        "summer"
    ],
    "user_id": 3,
    "date_joined": "2024-10-28T10:39:13"
}

3. Create a New User
- **Endpoint**: POST /users/
- **Method**: POST
- **JSON Input**:
{
    "username": "john_doe",
    "email": "john.doe@example.com",
    "password": "SecurePass123",
    "user_ip": "24.97.8.0",
    "location": "New York",
    "preferences": ["casual", "summer"]
}

- **Output**: 
{
    "username": "john_doe",
    "email": "john.doe@example.com",
    "user_ip": "24.97.8.0",
    "location": "New York",
    "preferences": [
        "casual",
        "summer"
    ],
    "user_id": 3,
    "date_joined": "2024-10-28T10:39:13"
}

4. Update an Existing User
- **Endpoint**: PUT /user/{user_id}
- **Method**: PUT
- **URL Parameters**: 
  - user_id: Replace {user_id} with an existing clothing item ID (e.g., 1).
- **JSON Input**:
{
    "username": "john_updated",
    "email": "john_updated@example.com",
    "user_ip": "216.73.163.219",
    "location": "San Francisco",
    "preferences": ["Sporty", "Casual"]
}

- **Output**: 
{
    "username": "john_updated",
    "email": "john_updated@example.com",
    "user_ip": "216.73.163.219",
    "location": "San Francisco",
    "preferences": [
        "Sporty",
        "Casual"
    ],
    "user_id": 1,
    "date_joined": "2024-10-28T10:01:17"
}

5. Delete a User by ID
- **Endpoint**: DELETE /user/{user_id}
- **Method**: DELETE
- **URL Parameters**: 
  - user_id: Replace {user_id} with the ID of the clothing item you want to delete (e.g., 3).
- **Output**: 
204 No Content

6. Retrieve All Clothing Items
- **Endpoint**: GET /clothing_items/user/{user_id}
- **Method**: GET
- **URL Parameters**: 
  - user_id: Replace {user_id} with an existing user item ID (e.g., 3).
- **Output**:
[
    {
        "clothing_type": "T-shirt",
        "for_weather": "All",
        "color": {"Blue"},
        "size": "L",
        "tags": {"casual", "summer"},
        "image_url": "http://example.com/tshirt.jpg",
        "item_id": 1,
        "user_id": 1,
        "date_added": "2024-10-28T10:01:17"
    },
    {
        "clothing_type": "Jeans",
        "for_weather": "Cooler temperature",
        "color": {"Navy blue"},
        "size": "M",
        "tags": {"casual", "winter"},
        "image_url": "http://example.com/jeans.jpg",
        "item_id": 2,
        "user_id": 2,
        "date_added": "2024-10-28T10:10:00"
    }
    ...
]

7. Retrieve a Specific Clothing Item by ID
- **Endpoint**: GET /clothing_items/{item_id}
- **Method**: GET
- **URL Parameters**: 
  - item_id: Replace {item_id} with an existing clothing item ID (e.g., 1).
- **Output**:
{
    "clothing_type": "T-shirt",
    "for_weather": "All",
    "color": {"Blue"},
    "size": "L",
    "tags": {"casual", "summer"},
    "image_url": "http://example.com/tshirt.jpg",
    "item_id": 1,
    "user_id": 1,
    "date_added": "2024-10-28T10:01:17"
}

8. Create a New Clothing Item
- **Endpoint**: POST /clothing_items/
- **Method**: POST
- **JSON Input**:
{
    "clothing_type": "T-shirt",
    "for_weather": "All",
    "color": {"Blue"},
    "size": "L",
    "tags": {"casual", "summer"},
    "image_url": "http://example.com/tshirt.jpg",
    "item_id": 1,
    "user_id": 1,
    "date_added": "2024-10-28T10:01:17"
}
- **Output**:
{
    "clothing_type": "T-shirt",
    "for_weather": "All ",
    "color": {"Blue"},
    "size": "L",
    "tags": {"casual", "summer"},
    "image_url": "http://example.com/tshirt.jpg",
    "item_id": 1,
    "user_id": 1,
    "date_added": "2024-10-28T10:01:17"
}

9. Update an Existing Clothing Item
- **Endpoint**: PUT /clothing_items/{item_id}
- **Method**: PUT
- **URL Parameters**: 
  - item_id: Replace {item_id} with an existing clothing item ID (e.g., 1).
- **JSON Input**:
{
    "user_id": 1,
    "clothing_type": "T-shirt",
    "for_weather": "All",
    "color": {"Light blue"},
    "size": "M",
    "tags": {"casual", "summer"},
    "image_url": "http://example.com/tshirt.jpg"
}
- **Output**:
{
    "clothing_type": "T-shirt",
    "for_weather": "All",
    "color": {"Light blue"},
    "size": "M",
    "tags": {"casual", "summer"},
    "image_url": "http://example.com/tshirt.jpg",
    "item_id": 1,
    "user_id": 1,
    "date_added": "2024-10-28T10:01:17"
}

10. Delete a Clothing Item by ID
- **Endpoint**: DELETE /clothing_items/{item_id}
- **Method**: DELETE
- **URL Parameters**: 
  - item_id: Replace {item_id} with the ID of the clothing item you want to delete (e.g., 1).
- **Output**: 
204 No Content

11. Retrieve Weather Data
- **Endpoint**: GET /weather/{location}
- **Method**: GET
- **URL Parameters**: 
  - location: Replace {location} with the desired location (e.g., "New York, US").
- **Output**: Array of weather data for five days
{[
    "date": "2024-11-11T00:00:00",
    "feels_max": 67.8,
    "feels_min": 55.1,
    "humidity": 65.3,
    "location": "new york,us",
    "precipitation": 0.138,
    "precipitation_probability": 100,
    "special_condition": "Rain, Partially cloudy",
    "temp_max": 67.8,
    "temp_min": 55.1,
    "weather_icon": "showers-day",
    "wind_speed": 16.2
],}

12. Fetch and Update a Fashion Trend
- **Endpoint**: POST /fashion_trends/update
- **Method**: POST
- **JSON Input**:
{
    "trend_id": 227,
    "title": "Denim on Denim",
    "description": "This trend involves wearing different denim pieces together. It could be a denim jacket paired with jeans or a denim shirt with a denim skirt.",
    "date_added": "2024-11-17T20:00:56",
    "tags": ["denim jacket", "jeans", "denim shirt"]
}
- **Output**:
{
    "trend_id": 227,
    "title": "Denim on Denim",
    "description": "Updated successfully",
    "tags": ["denim jacket", "jeans", "denim shirt"],
    "date_updated": "2024-11-17T20:30:00"
}

13. Retrieve Fashion Trends
- **Endpoint**: GET /fashion_trends/
- **Method**: GET
- **Output**:
[
    {
        "trend_id": 227,
        "title": "Denim on Denim",
        "description": "This trend involves wearing different denim pieces together. It could be a denim jacket paired with jeans or a denim shirt with a denim skirt.",
        "tags": ["denim jacket", "jeans", "denim shirt"],
        "date_added": "2024-11-17T20:00:56"
    }
]

### Custom Outfit Management

14. Register a New Outfit
- **Endpoint**: POST /outfit/
- **Method**: POST
- **JSON Input**:
{
    "user_id": 8,
    "occasion": ["casual"],
    "for_weather": "All Year Around",
    "clothings": [15, 16],
    "date_created": "2024-11-17T23:28:13"
}
- **Output**:
{
    "outfit_id": 6,
    "user_id": 8,
    "occasion": ["casual"],
    "for_weather": "All Year Around",
    "clothings": [15, 16],
    "date_created": "2024-11-17T23:28:13"
}

15. Retrieve Outfits of a User
- **Endpoint**: GET /outfit/user/{user_id}
- **Method**: GET
- **URL Parameters**:
  - user_id: Replace {user_id} with the ID of the user (e.g., 8).
- **Output**:
[
    {
        "outfit_id": 6,
        "user_id": 8,
        "occasion": ["casual"],
        "for_weather": "All Year Around",
        "clothings": [15, 16],
        "date_created": "2024-11-17T23:28:13"
    }
]

16. Update Outfit Information
- **Endpoint**: PUT /outfit/{item_id}
- **Method**: PUT
- **URL Parameters**:
  - item_id: Replace {item_id} with the outfit ID (e.g., 6).
- **JSON Input**:
{
    "user_id": 8,
    "occasion": ["casual", "formal"],
    "for_weather": "Winter",
    "clothings": [15, 16],
    "date_updated": "2024-11-18T10:30:00"
}
- **Output**:
{
    "outfit_id": 6,
    "user_id": 8,
    "occasion": ["casual", "formal"],
    "for_weather": "Winter",
    "clothings": [15, 16],
    "date_updated": "2024-11-18T10:30:00"
}

17. Delete an Outfit
- **Endpoint**: DELETE /outfit/{item_id}
- **Method**: DELETE
- **URL Parameters**:
  - item_id: Replace {item_id} with the ID of the outfit you want to delete (e.g., 6).
- **Output**: 
204 No Content

### Outfit Suggestion Management

18. Register a New Outfit Suggestion
- **Endpoint**: POST /outfits/suggest
- **Method**: POST
- **JSON Input**:
{
    "outfit_id": 6,
    "suggestions": [
        {
            "gender": "Male",
            "item_id": 1856,
            "eBay_link": ["https://www.ebay.com/itm/John-Raphael-Millenium-Three-Piece-Check-Windowpane-Green-Suit-52L-Pants-42X32-/204184384429"],
            "image_url": "https://i.ebayimg.com/thumbs/images/g/gV0AAOSw8UNjl951/s-l140.jpg"
        }
    ],
    "category": "Unisex",
    "date_added": "2024-11-18T15:39:45"
}
- **Output**:
{
    "suggestion_id": 40,
    "outfit_id": 6,
    "suggestions": [
        {
            "gender": "Male",
            "item_id": 1856,
            "eBay_link": ["https://www.ebay.com/itm/John-Raphael-Millenium-Three-Piece-Check-Windowpane-Green-Suit-52L-Pants-42X32-/204184384429"],
            "image_url": "https://i.ebayimg.com/thumbs/images/g/gV0AAOSw8UNjl951/s-l140.jpg"
        }
    ],
    "category": "Unisex",
    "date_added": "2024-11-18T15:39:45"
}

19. Retrieve Outfit Suggestions of a User
- **Endpoint**: GET /outfits/suggestions/{user_id}
- **Method**: GET
- **URL Parameters**:
  - user_id: Replace {user_id} with the ID of the user (e.g., 8).
- **Output**:
[
    {
        "suggestion_id": 40,
        "outfit_id": 6,
        "suggestions": [
            {
                "gender": "Male",
                "item_id": 1856,
                "eBay_link": ["https://www.ebay.com/itm/John-Raphael-Millenium-Three-Piece-Check-Windowpane-Green-Suit-52L-Pants-42X32-/204184384429"],
                "image_url": "https://i.ebayimg.com/thumbs/images/g/gV0AAOSw8UNjl951/s-l140.jpg"
            }
        ],
        "category": "Unisex",
        "date_added": "2024-11-18T15:39:45"
    }
]

20. Delete an Outfit Suggestion
- **Endpoint**: DELETE /outfits/suggestions/{suggestion_id}
- **Method**: DELETE
- **URL Parameters**:
  - suggestion_id: Replace {suggestion_id} with the ID of the suggestion to delete (e.g., 40).
- **Output**: 
204 No Content
