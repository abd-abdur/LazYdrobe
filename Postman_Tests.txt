Postman Tests for API Endpoints

1. Retrieve All Users
- **Endpoint**: GET /users/
- **Method**: GET
- **Output**: 
[
    {
        "username": "user_a",
        "email": "user_a@example.com",
        "user_ip": "24.97.8.0",
        "location": "NY, USA",
        "preferences": [
            "Black"
        ],
        "user_id": 1,
        "date_joined": "2024-10-28T10:01:17"
    },
    {
        "username": "user_b",
        "email": "user_b@example.com",
        "user_ip": "178.238.11.6",
        "location": "London, UK",
        "preferences": [
            "Long coat"
        ],
        "user_id": 2,
        "date_joined": "2024-10-28T10:01:17"
    },
    {
        "username": "john_doe",
        "email": "john.doe@example.com",
        "user_ip": "24.97.8.0",
        "location": "New York",
        "preferences": [
            "casual",
            "summer"
        ],
        "user_id": 3,
        "date_joined": "2024-10-28T10:39:13"
    },
    {
        "username": "jane_doe",
        "email": "jane.doe@example.com",
        "user_ip": "104.174.125.138",
        "location": "Los Angeles",
        "preferences": [
            "formal",
            "winter"
        ],
        "user_id": 5,
        "date_joined": "2024-10-28T10:44:00"
    },
    {
        "username": "john_doe",
        "email": "john@example.com",
        "user_ip": "24.97.8.0",
        "location": "New York",
        "preferences": [
            "Casual",
            "Formal"
        ],
        "user_id": 9,
        "date_joined": "2024-10-28T11:08:49"
    }
]

2. Retrieve a Specific User by ID
- **Endpoint**: GET /user/{user_id}
- **Method**: GET
- **URL Parameters**: 
  - user_id: Replace {user_id} with an existing clothing item ID (e.g., 3).
- **Output**: 
{
    "username": "john_doe",
    "email": "john.doe@example.com",
    "user_ip": "24.97.8.0",
    "location": "New York",
    "preferences": [
        "casual",
        "summer"
    ],
    "user_id": 3,
    "date_joined": "2024-10-28T10:39:13"
}

3. Create a New User
- **Endpoint**: POST /users/
- **Method**: POST
- **JSON Input**:
{
    "username": "john_doe",
    "email": "john.doe@example.com",
    "password": "SecurePass123",
    "user_ip": "24.97.8.0",
    "location": "New York",
    "preferences": ["casual", "summer"]
}

- **Output**: 
{
    "username": "john_doe",
    "email": "john.doe@example.com",
    "user_ip": "24.97.8.0",
    "location": "New York",
    "preferences": [
        "casual",
        "summer"
    ],
    "user_id": 3,
    "date_joined": "2024-10-28T10:39:13"
}

4. Update an Existing User
- **Endpoint**: PUT /user/{user_id}
- **Method**: PUT
- **URL Parameters**: 
  - user_id: Replace {user_id} with an existing clothing item ID (e.g., 1).
- **JSON Input**:
{
    "username": "john_updated",
    "email": "john_updated@example.com",
    "user_ip": "216.73.163.219",
    "location": "San Francisco",
    "preferences": ["Sporty", "Casual"]
}

- **Output**: 
{
    "username": "john_updated",
    "email": "john_updated@example.com",
    "user_ip": "216.73.163.219",
    "location": "San Francisco",
    "preferences": [
        "Sporty",
        "Casual"
    ],
    "user_id": 1,
    "date_joined": "2024-10-28T10:01:17"
}

5. Delete a User by ID
- **Endpoint**: DELETE /user/{user_id}
- **Method**: DELETE
- **URL Parameters**: 
  - user_id: Replace {user_id} with the ID of the clothing item you want to delete (e.g., 3).
- **Output**: 
204 No Content
